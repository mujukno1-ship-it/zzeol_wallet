// handleSearch/handleSearch.js
let lastReqId = 0;
let controller = null;

// 한글 ↔ 심볼 매핑
const NAME2SYMBOL = {
  '비트코인': 'BTC', '이더리움': 'ETH', '솔라나': 'SOL',
  '리플': 'XRP', '에이다': 'ADA', '시바이누': 'SHIB'
};

export async function handleSearch(rawInput) {
  const symbol = (NAME2SYMBOL[rawInput.trim()] || rawInput.trim()).toUpperCase();

  // 진행 중 요청 취소
  if (controller) controller.abort();
  controller = new AbortController();
  const myReqId = ++lastReqId;

  try {
    const r = await fetch(`/api/onchain?symbol=${encodeURIComponent(symbol)}`, { signal: controller.signal });
    const data = await r.json();

    // 오래된 응답 버림
    if (myReqId !== lastReqId) return;

    const sig = normalizeSignal(data.signal);
    const row = {
      코인: data.symbol || symbol,
      현재가: nfmt(data.price),
      등락: (isNum(data.price) && isNum(data.ma200))
        ? (((data.price - data.ma200) / data.ma200) * 100).toFixed(2) + '%'
        : '-',
      매수: sig === '매수' ? '●' : '',
      매도: sig === '매도' ? '●' : '',
      손절: nfmt(data?.levels?.stop),
      익절: nfmt(data?.levels?.take),
    };

    renderSearchRow(row); // 항상 1행만 유지
  } catch (e) {
    if (e.name !== 'AbortError') {
      console.error('[handleSearch]', e);
    }
  }
}

/** ───── 렌더링 ───── */
function renderSearchRow(r) {
  const tbody = document.getElementById('search-body');
  if (!tbody) return;
  tbody.innerHTML = `
    <tr>
      <td>${r.코인}</td>
      <td>${r.현재가}</td>
      <td>${r.등락}</td>
      <td>${r.매수}</td>
      <td>${r.매도}</td>
      <td>${r.손절}</td>
      <td>${r.익절}</td>
    </tr>
  `;
}

/** ───── 유틸 ───── */
function normalizeSignal(sig) {
  if (!sig) return null;
  const s = String(sig).toLowerCase();
  if (/buy|long|매수/.test(s)) return '매수';
  if (/sell|short|매도/.test(s)) return '매도';
  return null;
}
function isNum(x) {
  return typeof x === 'number' && Number.isFinite(x);
}
function nfmt(x) {
  return isNum(x) ? x.toLocaleString() : '-';
}
import { combineSignals } from '../strategies/signal';

async function fetchRow(symbol) {
  const [upbit, onchain] = await Promise.all([
    fetch(`/api/upbit?symbol=${encodeURIComponent(symbol)}`).then(r=>r.json()),
    fetch(`/api/onchain?symbol=${encodeURIComponent(symbol)}`).then(r=>r.json()),
  ]);

  const sig = combineSignals({ upbit, onchain });

  return {
    symbol,
    // 표에 뿌릴 값들
    price: upbit?.price ?? null,
    changeRate: upbit?.changeRate ?? null,
    mvrvZ: onchain?.mvrvZ ?? null,
    fundingRate: onchain?.fundingRate ?? null,

    // 신호 세트
    marketSignal: sig.market,   // 시장 신호
    onchainSignal: sig.chain,   // 온체인 신호
    signal: sig.both,           // 둘 다 일치할 때만 BUY/SELL
    reason: sig.reason.join(' | ')
  };
}
