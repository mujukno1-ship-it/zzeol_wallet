// handleSearch/handleSearch.js
let lastReqId = 0;
let ctrl = null;

const NAME2SYMBOL = {
  '비트코인':'BTC','이더리움':'ETH','솔라나':'SOL','리플':'XRP','에이다':'ADA','시바이누':'SHIB'
};

export async function handleSearch(raw){
  const sym = (NAME2SYMBOL[raw?.trim()] || raw?.trim() || 'BTC').toUpperCase();

  if (ctrl) ctrl.abort();
  ctrl = new AbortController();
  const my = ++lastReqId;

  try {
    const qs = encodeURIComponent(sym);
    const [upbit, chain, kimpView, cvd, ob, derivs, market] = await Promise.all([
      fetch(`/api/upbit?symbol=${qs}`, {signal: ctrl.signal}).then(r=>r.json()).catch(()=>({})),
      fetch(`/api/onchain?symbol=${qs}`, {signal: ctrl.signal}).then(r=>r.json()).catch(()=>({})),
      // onchain에 이미 kimchi 포함시 생략 가능 — 여긴 안전하게 chain.kimchi 사용
      Promise.resolve({}),
      fetch(`/api/tick?symbol=${qs}`, {signal: ctrl.signal}).then(r=>r.json()).catch(()=>({})),
      fetch(`/api/orderbook?symbol=${qs}`, {signal: ctrl.signal}).then(r=>r.json()).catch(()=>({})),
      fetch(`/api/derivs?symbol=${qs}`, {signal: ctrl.signal}).then(r=>r.json()).catch(()=>({})),
      fetch(`/api/market`, {signal: ctrl.signal}).then(r=>r.json()).catch(()=>({}))
    ]);

    if (my !== lastReqId) return; // 오래된 응답 무시

    // ── 1) 단일 신호 계산 ─────────────────────────
    const mktRate = toNum(upbit?.changeRate) || 0;
    const marketSignal = mktRate >= 0.003 ? 1 : mktRate <= -0.003 ? -1 : 0;

    const mvrv = toNum(chain?.mvrvZ);
    const funding = toNum(chain?.fundingRate);
    const chainSignal =
      (mvrv != null && mvrv < 0 && funding != null && funding < 0) ? 1 :
      (mvrv != null && mvrv > 6) || (funding != null && funding > 0.02) ? -1 : 0;

    const kimchi = toNum(chain?.kimchi); // onchain.js에서 계산한 김프(%)
    const kimpBias =
      kimchi != null ? (kimchi <= -0.5 ? +0.5 : kimchi >= 2 ? -0.5 : 0) : 0;

    const cvdVal = toNum(cvd?.cvd) || 0;
    const cvdBias = cvdVal > 0 ? +0.2 : cvdVal < 0 ? -0.2 : 0;

    const obImb = toNum(ob?.imbalance) || 0; // -1~+1
    const obBias = obImb * 0.25;

    const oi  = toNum(derivs?.openInterest);
    const fnd = toNum(derivs?.fundingRate);
    const oiBias =
      (oi!=null && fnd!=null)
        ? (fnd > 0.02 ? -0.2 : fnd < -0.005 ? +0.15 : 0)
        : 0;

    const atr = toNum(market?.atr);
    const vwap = toNum(market?.vwap);
    const regimeBias = (atr!=null && vwap!=null)
      ? (upbit?.price!=null && vwap!=null
          ? (upbit.price > vwap ? +0.07 : -0.07)
          : 0)
      : 0;

    // ── 2) 가중 합산 ─────────────────────────────
    const w = {
      mkt:0.25, chain:0.20, kimp:0.10, cvd:0.15, ob:0.10, oi:0.10, reg:0.10
    };
    const score =
      w.mkt*marketSignal +
      w.chain*chainSignal +
      w.kimp*kimpBias +
      w.cvd*cvdBias +
      w.ob*obBias +
      w.oi*oiBias +
      w.reg*regimeBias;

    const T_BUY = +0.35;
    const T_SELL = -0.35;
    let signal = 'HOLD';
    if (score >= T_BUY) signal = 'BUY';
    if (score <= T_SELL) signal = 'SELL';

    // ── 3) UI로 넘길 행 데이터 ────────────────────
    return {
      코인: sym,
      현재가: nfmt(upbit?.price),
      등락: pct(mktRate),
      김프: kimchi!=null ? kimchi.toFixed(2)+'%' : '-',
      CVD: cvdVal!=null ? cvdVal.toFixed(2) : '-',
      호가불균형: obImb!=null ? obImb.toFixed(2) : '-',
      OI: oi!=null ? oi.toLocaleString() : '-',
      펀딩: fnd!=null ? (fnd*100).toFixed(2)+'%' : '-',
      ATR: atr!=null ? atr.toFixed(2) : '-',
      VWAP: vwap!=null ? vwap.toFixed(2) : '-',
      매수: signal==='BUY' ? '●' : '',
      매도: signal==='SELL'? '●' : '',
      위험도: risk(score),
      이유: `mkt:${marketSignal}, chain:${chainSignal}, kimp:${kimpBias.toFixed(2)}, cvd:${cvdBias.toFixed(2)}, ob:${obBias.toFixed(2)}, oi:${oiBias.toFixed(2)}, reg:${regimeBias.toFixed(2)} → score:${score.toFixed(2)}`
    };
  } catch(e){
    if (e.name!=='AbortError') console.error('[handleSearch]', e);
    return { 코인: raw, 매수:'', 매도:'', 이유:'데이터 오류' };
  }
}

// 유틸
function toNum(x){const n=Number(x);return Number.isFinite(n)?n:null;}
function nfmt(x){return toNum(x)!=null ? toNum(x).toLocaleString() : '-';}
function pct(x){return toNum(x)!=null ? (toNum(x)*100).toFixed(2)+'%' : '-';}
function risk(score){
  if (score >= 0.50) return '1(낮음)';
  if (score >= 0.25) return '2';
  if (score >  -0.25) return '3';
  if (score >  -0.50) return '4';
  return '5(높음)';
}
